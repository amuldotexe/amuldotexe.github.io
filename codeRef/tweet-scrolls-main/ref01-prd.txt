# Tweet-Scrolls: Twitter Thread Archiver
Product Requirements Document

1. Core Functionality
- Process Twitter JSON data files to extract and organize tweet threads
- Support parsing of tweet threads, including replies and conversations
- Filter out retweets and irrelevant replies
- Sort threads chronologically in reverse order (newest first)

2. Input Requirements
- Accept JSON file path via CLI prompt
- Require Twitter handle/screen name via CLI prompt
- Validate file existence before processing
- Support large files through async I/O and buffering

3. Data Processing
- Parse JSON into TweetWrapper and Tweet structs
- Extract metadata: id_str, favorite_count, full_text, reply info, retweets, timestamps
- Group tweets into Thread structs based on conversation flow
- Calculate per-thread metrics: total likes, retweets, tweet count

4. Output Generation
- Create output_<handle>_<timestamp> directory in input file location
- Generate three files:
  * threads_<handle>_<timestamp>.csv: Thread metrics with headers
  * threads_<handle>_<timestamp>.txt: Formatted thread content
  * results_<handle>_<timestamp>.txt: Operation stats with Avengers theme

5. Performance Features
- Async I/O with tokio runtime
- Buffered CSV writing with 100 record chunks
- Memory optimization via mimalloc allocator
- Concurrent processing with tokio tasks

6. Error Handling
- Context-aware error handling with anyhow
- Graceful error messages for common failures
- Input validation for files and JSON format
- Proper error propagation through Result types

7. User Experience
- Marvel Avengers themed progress messages
- Emoji status indicators
- Clear operation statistics
- Timestamp-based operation tracking

8. Data Format Support
- CSV with 8 standardized columns
- Human-readable thread text files
- Operation summary with metrics
- Standard datetime formats

9. Technical Stack
- Rust 2021 edition
- Dependencies:
  * tokio for async runtime
  * serde for serialization
  * csv for data output
  * mimalloc for memory
  * anyhow for error handling
  * chrono for timestamps

## Usage
Run the program with `cargo run`
