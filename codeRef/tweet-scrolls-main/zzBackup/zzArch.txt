LLM-Assisted Code Migration Strategy
==================================

System Architecture & Data Flow
-----------------------------

1. Analysis Phase
---------------
- Read backup/main.rs to understand full functionality
  * Map data structures and their relationships
  * Identify core business logic
  * Note external dependencies
  * Document current error handling
  * List all CLI parameters and their usage

2. Migration Priority
------------------
1. Core Data Structures (models/*)
   - Tweet struct and related types
     * Add proper field validation
     * Implement Display, Debug, Serialize
     * Add builder pattern if complex
     * Consider using derive macros
   
   - Core traits
     * ThreadBuilder trait for flexibility
     * Export trait for output formats
     * Validation traits for data integrity

2. Domain Logic (services/*)
   - Thread building logic
     * Extract core algorithm
     * Make thread rules configurable
     * Add validation hooks
     * Implement proper error handling

   - Processing pipeline
     * Define clear stage boundaries
     * Add progress tracking
     * Implement cancellation
     * Consider using async

3. I/O Layer (exporters/*)
   - CSV handling
     * Buffered writing
     * Custom delimiter support
     * Proper escaping
     * Header management

   - Text output
     * Configurable formatting
     * Unicode support
     * Progress indicators
     * Memory efficient chunks

4. Main Orchestration
   - CLI handling
     * Use clap for arguments
     * Validate inputs early
     * Show helpful errors
   
   - Coordination
     * Clean shutdown
     * Resource cleanup
     * Progress updates
     * Error reporting

3. Migration Process Per Component
-------------------------------
1. Extract from backup/main.rs
   * Copy relevant code
   * Note dependencies
   * Document assumptions

2. Identify dependencies
   * List required crates
   * Note internal dependencies
   * Check for circular refs

3. Restructure
   * Break into smaller functions
   * Add proper error types
   * Implement traits
   * Add documentation

4. Error Handling
   * Create custom error enum
   * Add context to errors
   * Implement From conversions
   * Add recovery options

5. Testing
   * Unit tests for logic
   * Integration tests
   * Property tests if applicable
   * Benchmark critical paths

4. Code Migration Guidelines
-------------------------
- Function Guidelines
  * Max 20-30 lines
  * Single responsibility
  * Clear naming
  * Type-driven design

- Error Handling
  * Use Result where applicable
  * Add context with anyhow
  * Custom errors with thiserror
  * Proper error propagation

- Documentation
  * Document public APIs
  * Add examples
  * Note performance implications
  * Document error cases

5. Error Handling Strategy
-----------------------
- Module Errors
  * Define enum per module
  * Include source errors
  * Add context methods
  * Implement std::error::Error

- Error Propagation
  * Use ? operator
  * Add context at boundaries
  * Consider recovery strategies
  * Log appropriately

6. Testing Approach
----------------
- Unit Tests
  * Test each function
  * Cover edge cases
  * Test error paths
  * Use test fixtures

- Integration Tests
  * Test full workflows
  * Test file I/O
  * Test CLI interface
  * Test concurrent usage

- Performance Tests
  * Benchmark large files
  * Test memory usage
  * Test concurrent performance

7. Performance Considerations
--------------------------
- I/O Optimization
  * Use BufReader/BufWriter
  * Proper buffer sizes (8KB+)
  * Minimize allocations
  * Batch operations

- Resource Management
  * Proper channel capacity
  * Clean shutdown
  * Resource pools if needed
  * Memory limits

8. Quality Checks
---------------
- Static Analysis
  * Run clippy --all-features
  * Address all warnings
  * Use cargo fmt
  * Run cargo audit

- Documentation
  * 100% public API coverage
  * Examples in docs
  * README updates
  * CHANGELOG updates
